(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{379:function(t,e,r){"use strict";r.r(e);var a=r(45),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),r("h2",{attrs:{id:"javascript-解析器是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript-解析器是什么"}},[t._v("#")]),t._v(" JavaScript 解析器是什么")]),t._v(" "),r("p",[t._v("广义上讲，解析器 (parser) 是把特定格式的文本转换成某种数据结构的程序。常见地，解析器将输入的字符序列转换成自定义结构的抽象语法树 (Abstract Syntax Tree，AST)。对于不同的输入格式，可以编写不同的解析器，如：")]),t._v(" "),r("p",[t._v("但是对于相同的输入格式，如果每个解析器都用自定义的数据结构，显然会造成很大的麻烦，不同的工具库调用将变得复杂 —— 需要统一的 AST 规范。对于 JavaScript 而言，"),r("a",{attrs:{href:"https://github.com/estree/estree",target:"_blank",rel:"noopener noreferrer"}},[t._v("Estree"),r("OutboundLink")],1),t._v(" 规定了统一的 AST 语法结构，如 "),r("code",[t._v("if")]),t._v(" 语句的 AST 节点类型定义如下：")]),t._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IfStatement")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Statement "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"IfStatement"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    test"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Expression"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    consequent"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Statement"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    alternate"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Statement "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("p",[t._v("因此，如果你想实现一个 JavaScript 解析器，可以先阅读一下 "),r("a",{attrs:{href:"https://github.com/estree/estree",target:"_blank",rel:"noopener noreferrer"}},[t._v("Estree"),r("OutboundLink")],1),t._v(" 的文档。")]),t._v(" "),r("p",[t._v("那么，解析器在 JavaScript 中有哪些应用？ 实际上，很多常用的工具库 —— "),r("code",[t._v("Babel")]),t._v("、"),r("code",[t._v("Webpack")]),t._v("、"),r("code",[t._v("Eslint")]),t._v(" 等都用到了 JavaScript 解析器。")]),t._v(" "),r("p",[t._v("目前比较知名的 JavaScript 解析器有 "),r("a",{attrs:{href:"https://github.com/jquery/esprima",target:"_blank",rel:"noopener noreferrer"}},[t._v("Esprima"),r("OutboundLink")],1),t._v("、"),r("a",{attrs:{href:"https://github.com/acornjs/acorn",target:"_blank",rel:"noopener noreferrer"}},[t._v("Acorn"),r("OutboundLink")],1),t._v("、"),r("a",{attrs:{href:"https://github.com/babel/babylon",target:"_blank",rel:"noopener noreferrer"}},[t._v("Babylon"),r("OutboundLink")],1),t._v(" 等。本文实现的 "),r("a",{attrs:{href:"https://github.com/yangzheli/a-simplified-parser",target:"_blank",rel:"noopener noreferrer"}},[t._v("a simplified parser"),r("OutboundLink")],1),t._v(" 也主要参考 "),r("code",[t._v("Esprima")]),t._v(" 和 "),r("code",[t._v("Acorn")]),t._v("，感兴趣的推荐阅读相关源码。")]),t._v(" "),r("p",[t._v("了解了这些，再来聊一聊什么是抽象语法树。")]),t._v(" "),r("h2",{attrs:{id:"什么是抽象语法树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是抽象语法树"}},[t._v("#")]),t._v(" 什么是抽象语法树")]),t._v(" "),r("p",[t._v("在 《编译原理》 中，编译器为了将高级语言转译为二进制代码，需要以下几步。")]),t._v(" "),r("p",[t._v("AST 就是词法分析和语法分析后得到的树形结构的数据。词法分析扫描输入的字符序列，忽略其中的注释、空格、换行符等，将输入识别为一个个的单词 (token)，这些单词可能是字符串、标识符、关键字等；语法分析根据识别出的单词解析其中的语句或表达式，一个个节点就组成了一棵语法树。")]),t._v(" "),r("p",[t._v("下图就是词法分析、语法分析的一个简单例子：")]),t._v(" "),r("h2",{attrs:{id:"工具"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工具"}},[t._v("#")]),t._v(" 工具")]),t._v(" "),r("p",[t._v("下面推荐两个常用的 AST 解析网站：")]),t._v(" "),r("ul",[r("li",[r("p",[r("a",{attrs:{href:"https://esprima.org/demo/parse.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Esprima Online Parsing"),r("OutboundLink")],1)])]),t._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("AST Explorer"),r("OutboundLink")],1)])])])])}),[],!1,null,null,null);e.default=s.exports}}]);